--- lctype.c	Thu Jan 15 17:14:12 1970
+++ lctype.c	Thu Jan 15 17:14:12 1970
@@ -26,20 +26,20 @@
   0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,
   0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,
   0x05,  0x05,  0x05,  0x04,  0x04,  0x04,  0x04,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
-  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  /* lua-lab: */
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,
+  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x01,  0x00,
 };
--- linit.c	Thu Jan 15 17:14:12 1970
+++ linit.c	Thu Jan 15 17:14:12 1970
@@ -37,6 +37,7 @@
   {LUA_BITLIBNAME, luaopen_bit32},
   {LUA_MATHLIBNAME, luaopen_math},
   {LUA_DBLIBNAME, luaopen_debug},
+  {LUA_BUFLIBNAME, luaopen_buffer},  /* lua-lab: */
   {NULL, NULL}
 };
 
--- llex.c	Thu Jan 15 17:14:12 1970
+++ llex.c	Thu Jan 15 17:14:12 1970
@@ -34,11 +34,11 @@
 
 /* ORDER RESERVED */
 static const char *const luaX_tokens [] = {
-    "and", "break", "do", "else", "elseif",
+    "and", "break", "continue", "do", "else", "elseif",  /* lua-lab: */
     "end", "false", "for", "function", "if",
     "in", "local", "nil", "not", "or", "repeat",
     "return", "then", "true", "until", "while",
-    "..", "...", "==", ">=", "<=", "~=", "<eof>",
+    "..", "...", "==", ">=", "<=", "~=", "!=", "<eof>",  /* lua-lab: */
     "<number>", "<name>", "<string>"
 };
 
@@ -436,6 +436,7 @@
         if (ls->current != '=') return '>';
         else { next(ls); return TK_GE; }
       }
+      case '!':  /* lua-lab: */
       case '~': {
         next(ls);
         if (ls->current != '=') return '~';
--- llex.h	Thu Jan 15 17:14:12 1970
+++ llex.h	Thu Jan 15 17:14:12 1970
@@ -23,7 +23,7 @@
 */
 enum RESERVED {
   /* terminal symbols denoted by reserved words */
-  TK_AND = FIRST_RESERVED, TK_BREAK,
+  TK_AND = FIRST_RESERVED, TK_BREAK, TK_CONTINUE,  /* lua-lab: */
   TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,
   TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,
   TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,
--- lparser.c	Thu Jan 15 17:14:12 1970
+++ lparser.c	Thu Jan 15 17:14:12 1970
@@ -42,6 +42,7 @@
 typedef struct BlockCnt {
   struct BlockCnt *previous;  /* chain */
   int breaklist;  /* list of jumps out of this loop */
+  int continuelist;  /* lua-lab: list of jumps to the loop's test */
   lu_byte nactvar;  /* # active locals outside the breakable structure */
   lu_byte upval;  /* true if some variable in the block is an upvalue */
   lu_byte isbreakable;  /* true if `block' is a loop */
@@ -329,6 +330,7 @@
 
 static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isbreakable) {
   bl->breaklist = NO_JUMP;
+  bl->continuelist = NO_JUMP;  /* lua-lab: */
   bl->isbreakable = isbreakable;
   bl->nactvar = fs->nactvar;
   bl->upval = 0;
@@ -520,9 +522,15 @@
   else  /* ls->t.token == '[' */
     yindex(ls, &key);
   cc->nh++;
-  checknext(ls, '=');
-  rkkey = luaK_exp2RK(fs, &key);
-  expr(ls, &val);
+  if (ls->t.token == '=') {  /* lua-lab: */
+    luaX_next(ls);
+    rkkey = luaK_exp2RK(fs, &key);
+    expr(ls, &val);
+  }
+  else {
+    rkkey = luaK_exp2RK(fs, &key);
+    init_exp(&val, VTRUE, 0);
+  }
   luaK_codeABC(fs, OP_SETTABLE, cc->t->u.info, rkkey, luaK_exp2RK(fs, &val));
   fs->freereg = reg;  /* free registers */
 }
@@ -1042,11 +1050,11 @@
 }
 
 
-static void breakstat (LexState *ls) {
+static void breakstat (LexState *ls, int n) {  /* lua-lab: */
   FuncState *fs = ls->fs;
   BlockCnt *bl = fs->bl;
   int upval = 0;
-  while (bl && !bl->isbreakable) {
+  while (bl && (!bl->isbreakable || --n)) {  /* lua-lab: */
     upval |= bl->upval;
     bl = bl->previous;
   }
@@ -1056,7 +1064,23 @@
     luaK_codeABC(fs, OP_CLOSE, bl->nactvar, 0, 0);
   luaK_concat(fs, &bl->breaklist, luaK_jump(fs));
 }
-
+
+
+static void continuestat (LexState *ls, int n) {  /* lua-lab: */
+  FuncState *fs = ls->fs;
+  BlockCnt *bl = fs->bl;
+  int upval = 0;
+  while (bl && (!bl->isbreakable || --n)) {
+    upval |= bl->upval;
+    bl = bl->previous;
+  }
+  if (!bl)
+    luaX_syntaxerror(ls, "no loop to continue");
+  if (upval)
+    luaK_codeABC(fs, OP_CLOSE, bl->nactvar, 0, 0);
+  luaK_concat(fs, &bl->continuelist, luaK_jump(fs));
+}
+
 
 static void whilestat (LexState *ls, int line) {
   /* whilestat -> WHILE cond DO block END */
@@ -1071,6 +1095,7 @@
   checknext(ls, TK_DO);
   block(ls);
   luaK_jumpto(fs, whileinit);
+  luaK_patchlist(fs, bl.continuelist, whileinit);  /* lua-lab: continue goes to start, too */
   check_match(ls, TK_END, TK_WHILE, line);
   leaveblock(fs);
   luaK_patchtohere(fs, condexit);  /* false conditions finish the loop */
@@ -1087,6 +1112,7 @@
   enterblock(fs, &bl2, 0);  /* scope block */
   luaX_next(ls);  /* skip REPEAT */
   chunk(ls);
+  luaK_patchtohere(fs, bl1.continuelist);  /* lua-lab: */
   check_match(ls, TK_UNTIL, TK_REPEAT, line);
   condexit = cond(ls);  /* read condition (inside scope block) */
   if (!bl2.upval) {  /* no upvalues? */
@@ -1094,7 +1120,7 @@
     luaK_patchlist(fs, condexit, repeat_init);  /* close the loop */
   }
   else {  /* complete semantics when there are upvalues */
-    breakstat(ls);  /* if condition then break */
+    breakstat(ls, 1);  /* lua-lab: if condition then break */
     luaK_patchtohere(ls->fs, condexit);  /* else... */
     leaveblock(fs);  /* finish scope... */
     luaK_jumpto(fs, repeat_init);  /* and repeat */
@@ -1128,6 +1154,7 @@
   block(ls);
   leaveblock(fs);  /* end of scope for declared variables */
   luaK_patchtohere(fs, prep);
+  luaK_patchtohere(fs, bl.previous->continuelist);  /* lua-lab: continue, if any, jumps to here */
   if (isnum)  /* numeric for? */
     endfor = luaK_codeAsBx(fs, OP_FORLOOP, base, NO_JUMP);
   else {  /* generic for */
@@ -1392,9 +1419,14 @@
     }
     case TK_BREAK: {  /* stat -> breakstat */
       luaX_next(ls);  /* skip BREAK */
-      breakstat(ls);
+      breakstat(ls, testnext(ls, TK_NUMBER) ? (int)ls->t.seminfo.r : 1);  /* lua-lab: multi scope 'break n' */
       return 1;  /* must be last statement */
     }
+    case TK_CONTINUE: {  /* lua-lab: stat -> continuestat */
+      luaX_next(ls);  /* skip CONTINUE */
+      continuestat(ls, testnext(ls, TK_NUMBER) ? (int)ls->t.seminfo.r : 1);  /* multi scope 'continue n' */
+      return 1;	 /* must be last statement */
+    }
     default: {  /* stat -> func | assignment */
       exprstat(ls);
       return 0;
--- lstrlib.c	Thu Jan 15 17:14:12 1970
+++ lstrlib.c	Thu Jan 15 17:14:12 1970
@@ -872,7 +872,14 @@
         }
         case 's': {
           size_t l;
-          const char *s = luaL_checklstring(L, arg, &l);
+          const char *s;  /* lua-lab: */
+          if (!lua_isstring(L, arg)) {
+            lua_getglobal(L, "tostring");
+            lua_pushvalue(L, arg);
+            lua_call(L, 1, 1);
+            lua_replace(L, arg);
+          }
+          s = luaL_checklstring(L, arg, &l);
           if (!strchr(form, '.') && l >= 100) {
             /* no precision and string is too long to be formatted;
                keep original string */
@@ -896,6 +903,93 @@
   luaL_pushresult(&b);
   return 1;
 }
+
+
+#if defined(LUA_DL_DLL)  /* lua-lab: */
+
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#include "lmem.h"
+
+static void pushnilanderror(lua_State* L)
+{
+	const int error = GetLastError();
+	char buffer[128];
+	lua_pushnil(L);
+	if(FormatMessage(FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_SYSTEM, 0, error, 0, buffer, sizeof(buffer), 0))
+		lua_pushstring(L, buffer);
+	else
+		lua_pushfstring(L, "system error %d\n", error);
+}
+
+static int str_mb2wc(lua_State* L)	/* str_dst, errmsg = mb2wc(str_src, num_codepage = 0) */
+{
+	size_t srclen;
+	const char* const src = luaL_checklstring(L, 1, &srclen);
+	const lua_Integer cp = luaL_optinteger(L, 2, 0);
+	if(srclen <= 2000)
+	{
+		WCHAR dst[2000];
+		int dstlen = MultiByteToWideChar((UINT)cp, 0, src, srclen, dst, sizeof(dst) / sizeof(*dst));
+		if(dstlen <= 0 && srclen > 0)
+		{
+			pushnilanderror(L);
+			return 2;
+		}
+		lua_pushlstring(L, (const char*)dst, dstlen * sizeof(WCHAR));
+		return 1;
+	}
+	else
+	{
+		WCHAR* const dst = luaM_malloc(L, srclen * sizeof(WCHAR));
+		int dstlen = MultiByteToWideChar((UINT)cp, 0, src, srclen, dst, srclen);
+		if(dstlen <= 0 && srclen > 0)
+		{
+			luaM_free(L, dst);
+			pushnilanderror(L);
+			return 2;
+		}
+		lua_pushlstring(L, (const char*)dst, dstlen * sizeof(WCHAR));
+		luaM_free(L, dst);
+		return 1;
+	}
+}
+
+static int str_wc2mb(lua_State* L)	/* str_dst, errmsg = wc2mb(str_src, num_codepage = 0) */
+{
+	size_t srclen;
+	const char* const src = luaL_checklstring(L, 1, &srclen);
+	const lua_Integer cp = luaL_optinteger(L, 2, 0);
+	srclen /= 2;
+	if(srclen <= 1333)
+	{
+		char dst[4000];
+		const int dstlen = WideCharToMultiByte((UINT)cp, 0, (LPCWSTR)src, srclen, dst, sizeof(dst), 0, 0);
+		if(dstlen <= 0 && srclen > 0)
+		{
+			pushnilanderror(L);
+			return 2;
+		}
+		lua_pushlstring(L, dst, dstlen);
+		return 1;
+	}
+	else
+	{
+		char* const dst = luaM_malloc(L, srclen * 3);
+		const int dstlen = WideCharToMultiByte((UINT)cp, 0, (LPCWSTR)src, srclen, dst, srclen * 3, 0, 0);
+		if(dstlen <= 0 && srclen > 0)
+		{
+			luaM_free(L, dst);
+			pushnilanderror(L);
+			return 2;
+		}
+		lua_pushlstring(L, dst, dstlen);
+		luaM_free(L, dst);
+		return 1;
+	}
+}
+
+#endif
 
 /* }====================================================== */
 
@@ -915,6 +1009,10 @@
   {"reverse", str_reverse},
   {"sub", str_sub},
   {"upper", str_upper},
+#if defined(LUA_DL_DLL)  /* lua-lab: */
+  {"mb2wc", str_mb2wc},
+  {"wc2mb", str_wc2mb},
+#endif
   {NULL, NULL}
 };
 
--- lua.h	Thu Jan 15 17:14:12 1970
+++ lua.h	Thu Jan 15 17:14:12 1970
@@ -18,7 +18,7 @@
 
 #define LUA_VERSION_MAJOR	"5"
 #define LUA_VERSION_MINOR	"2"
-#define LUA_VERSION_RELEASE	"0" " (alpha)"
+#define LUA_VERSION_RELEASE	"0" " (alpha) (lua-lab patched)"  /* lua-lab: */
 
 #define LUA_VERSION	"Lua " LUA_VERSION_MAJOR "." LUA_VERSION_MINOR
 #define LUA_RELEASE	LUA_VERSION "." LUA_VERSION_RELEASE
--- luaconf.h	Thu Jan 15 17:14:12 1970
+++ luaconf.h	Thu Jan 15 17:14:12 1970
@@ -214,9 +214,9 @@
 #define luai_writestringerror(s,p) \
 	(fprintf(stderr, (s), (p)), fflush(stderr))
 
-
-
-
+#ifndef LUA_COMPAT_ALL  /* lua-lab: */
+#define LUA_COMPAT_ALL
+#endif
 
 /*
 ** {==================================================================
--- lualib.h	Thu Jan 15 17:14:12 1970
+++ lualib.h	Thu Jan 15 17:14:12 1970
@@ -13,6 +13,7 @@
 
 /* Key to file-handle type */
 #define LUA_FILEHANDLE		"FILE*"
+#define LUA_BUFFERSTRUCT	"BUFFER"  /* lua-lab: */
 
 
 LUAMOD_API int (luaopen_base) (lua_State *L);
@@ -43,6 +44,9 @@
 
 #define LUA_LOADLIBNAME	"package"
 LUAMOD_API int (luaopen_package) (lua_State *L);
+
+#define LUA_BUFLIBNAME	"buffer"  /* lua-lab: */
+LUAMOD_API int (luaopen_buffer) (lua_State *L);
 
 
 /* open all previous libraries */
